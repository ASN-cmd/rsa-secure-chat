name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  client-build-and-test:
    name: Client - build and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use cache only if lockfile exists; otherwise set up Node without cache
      - name: Use Node.js (with cache)
        if: ${{ hashFiles('client/package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Use Node.js (no cache)
        if: ${{ hashFiles('client/package-lock.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: client
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json found. Using 'npm install' (no cache)."
            npm install
          fi

      - name: Lint (if configured)
        working-directory: client
        run: |
          if npm run | grep -q "^  lint$"; then
            npm run lint
          else
            echo "No lint script found, skipping."
          fi

      - name: Run tests (if configured)
        working-directory: client
        env:
          CI: true
        run: |
          if npm run | grep -q "^  test$"; then
            npm test -- --watchAll=false
          else
            echo "No test script found, skipping."
          fi

      - name: Build
        working-directory: client
        run: npm run build

      - name: Upload client build artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/build
          if-no-files-found: error

  server-check:
    name: Server - dependency install and syntax check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Use compileall (robust) instead of shell glob with py_compile
      - name: Syntax check server
        run: |
          if [ -d server ]; then
            python -m compileall -q server
          else
            echo "No server/ directory found, skipping syntax check."
          fi

      - name: Upload server files for downstream jobs
        uses: actions/upload-artifact@v4
        with:
          name: server-source
          path: |
            server/**
            requirements.txt

  docker-build-and-publish:
    name: Build and publish server image to GHCR
    needs: [ client-build-and-test, server-check ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/server
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-pages:
    name: Deploy client to GitHub Pages
    needs: client-build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download client build artifact
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: ./client-build

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./client-build

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
